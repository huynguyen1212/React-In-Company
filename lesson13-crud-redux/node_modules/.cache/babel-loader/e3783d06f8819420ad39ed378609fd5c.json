{"ast":null,"code":"import * as types from \"../constants/ActionTypes\";\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar generateID = () => {\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4();\n};\n\nvar findIndex = (tasks, id) => {\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      var task = {\n        id: action.task.id,\n        name: action.task.name,\n        status: action.task.status === \"true\" ? true : false\n      };\n\n      if (action.task.id) {} else {\n        state.push(newTask);\n      }\n\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state[index] = { ...state[index],\n        status: !state[index].status\n      };\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/huynguyen/Desktop/Thực tập/React-In-Company/lesson13-crud-redux/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","generateID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","SAVE_TASK","name","status","push","newTask","setItem","stringify","UPDATE_STATUS_TASK","DELETE_TASK","splice"],"mappings":"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","sourcesContent":["import * as types from \"../constants/ActionTypes\";\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n};\n\nvar generateID = () => {\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4();\n};\n\nvar findIndex = (tasks, id) => {\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      var task = {\n        id: action.task.id,\n        name: action.task.name,\n        status: action.task.status === \"true\" ? true : false,\n      };\n      if (action.task.id) {\n      } else {\n        state.push(newTask);\n      }\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state[index] = {\n        ...state[index],\n        status: !state[index].status,\n      };\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;\n"]},"metadata":{},"sourceType":"module"}