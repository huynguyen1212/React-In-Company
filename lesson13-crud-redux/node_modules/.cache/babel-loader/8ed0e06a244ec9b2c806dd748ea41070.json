{"ast":null,"code":"import * as types from \"../constants/ActionTypes\";\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar generateID = () => {\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4();\n};\n\nvar findIndex = id => {\n  var {\n    tasks\n  } = this.state;\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: generateID(),\n        name: action.task.name,\n        status: action.task.status === \"true\" ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      var index = this.findIndex(id);\n\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n          tasks: tasks\n        });\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n      }\n\n      console.log(action);\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/huynguyen/Desktop/Thực tập/React-In-Company/lesson13-crud-redux/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","generateID","findIndex","id","tasks","state","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","type","LIST_ALL","ADD_TASK","newTask","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","setState","console","log"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;;AAEA,IAAIC,EAAE,GAAG,MAAM;AACb,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EACJC,QADI,CACK,EADL,EAEJC,SAFI,CAEM,CAFN,CAAP;AAGD,CAJD;;AAMA,IAAIC,UAAU,GAAG,MAAM;AACrB,SAAON,EAAE,KAAKA,EAAE,EAAT,GAAc,GAAd,GAAoBA,EAAE,EAAtB,GAA2B,GAA3B,GAAiCA,EAAE,EAAnC,GAAwC,GAAxC,GAA8CA,EAAE,EAAhD,GAAqDA,EAAE,EAA9D;AACD,CAFD;;AAIA,IAAIO,SAAS,GAAIC,EAAD,IAAQ;AACtB,MAAI;AAAEC,IAAAA;AAAF,MAAY,KAAKC,KAArB;AACA,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7B,QAAID,IAAI,CAACL,EAAL,KAAYA,EAAhB,EAAoB;AAClBG,MAAAA,MAAM,GAAGG,KAAT;AACD;AACF,GAJD;AAKA,SAAOH,MAAP;AACD,CATD;;AAWA,IAAII,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AAEA,IAAIM,SAAS,GAAG,CAACX,KAAK,GAAGU,YAAT,EAAuBE,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKxB,KAAK,CAACyB,QAAX;AACE,aAAOd,KAAP;;AACF,SAAKX,KAAK,CAAC0B,QAAX;AACE,UAAIC,OAAO,GAAG;AACZlB,QAAAA,EAAE,EAAEF,UAAU,EADF;AAEZqB,QAAAA,IAAI,EAAEL,MAAM,CAACT,IAAP,CAAYc,IAFN;AAGZC,QAAAA,MAAM,EAAEN,MAAM,CAACT,IAAP,CAAYe,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHnC,OAAd;AAKAlB,MAAAA,KAAK,CAACmB,IAAN,CAAWH,OAAX;AACAR,MAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAerB,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACF,SAAKX,KAAK,CAACiC,kBAAX;AACE,UAAIlB,KAAK,GAAG,KAAKP,SAAL,CAAeC,EAAf,CAAZ;;AACA,UAAIM,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBL,QAAAA,KAAK,CAACK,KAAD,CAAL,CAAac,MAAb,GAAsB,CAACnB,KAAK,CAACK,KAAD,CAAL,CAAac,MAApC;AACA,aAAKK,QAAL,CAAc;AACZxB,UAAAA,KAAK,EAAEA;AADK,SAAd;AAGAS,QAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAetB,KAAf,CAA9B;AACD;;AACDyB,MAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AACA,aAAO,CAAC,GAAGZ,KAAJ,CAAP;;AACF;AACE,aAAOA,KAAP;AAxBJ;AA0BD,CA3BD;;AA6BA,eAAeW,SAAf","sourcesContent":["import * as types from \"../constants/ActionTypes\";\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n};\n\nvar generateID = () => {\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4();\n};\n\nvar findIndex = (id) => {\n  var { tasks } = this.state;\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n    case types.ADD_TASK:\n      var newTask = {\n        id: generateID(),\n        name: action.task.name,\n        status: action.task.status === \"true\" ? true : false,\n      };\n      state.push(newTask);\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n    case types.UPDATE_STATUS_TASK:\n      var index = this.findIndex(id);\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n          tasks: tasks,\n        });\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n      }\n      console.log(action);\n      return [...state];\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;\n"]},"metadata":{},"sourceType":"module"}